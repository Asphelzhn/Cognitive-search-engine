from django.db import models


class User(models.Model):
    userID = models.IntegerField() #could be removed since and id automaticly is generated. the id starts from 1 and is incrementing for each new tuple.
    userName = models.TextField(max_length=50)
    firstName = models.TextField(max_length=50)


class Document(models.Model):
    title = models.CharField(max_length=200)
    file = models.FileField(upload_to='detecht_api/static/pdf', max_length=100, blank=True)

    def __unicode__(self):
        return self.title


class Keywords(models.Model):
    word = models.CharField(max_length=20)  #High limit to avoid problems with creating keywords.
    #id of each tuple is autogenerated

    def __unicode__(self):
        return self.word

    def add_keyword(self, word):
        keyword, created = Keywords.objects.get_or_create(word=word)
        if created:
            keyword.save()
            return "Keyword " + keyword.word + " saved"
        return "Already in db"


class Keyword_distance(models.Model):
    id_1 = models.IntegerField()    # Values from -2147483648 to 2147483647
    id_2 = models.IntegerField()
    similarity = models.DecimalField(max_digits=5, decimal_places=4) #Can take max 1 digit (0 or 1) and 4 decimals. eg 1.1234
    #id of each tuple is autogenerated

    def add_keyword_distance(self, id1, id2, similarity):
        keyword_distance, created = Keyword_distance.objects.get_or_create(id_1=id1, id_2=id2, similarity=similarity)
        if created:
            return "Keyword distance " + keyword_distance.id_1 + keyword_distance.id_2 + keyword_distance.similarity \
                   + "created"
        return "Keyword distance already in db"

    def get_similarity(self):
        return self.similarity
